class ContentViewer {
    constructor() {
        this.pages = [];
        this.currentPage = null;
        this.filteredPages = [];
        
        this.initializeElements();
        this.bindEvents();
        this.loadPages();
    }
    
    initializeElements() {
        // DOM elements
        this.pagesList = document.getElementById('pages-list');
        this.pageCount = document.getElementById('page-count');
        this.totalPages = document.getElementById('total-pages');
        this.totalSections = document.getElementById('total-sections');
        this.welcomeScreen = document.getElementById('welcome-screen');
        this.pageContent = document.getElementById('page-content');
        this.contentArea = document.querySelector('.content-area');
        this.contentLoading = document.getElementById('content-loading');
        this.pageTitle = document.getElementById('page-title');
        this.pageUrl = document.getElementById('page-url');
        this.pageDate = document.getElementById('page-date');
        this.sectionsCount = document.getElementById('sections-count');
        this.sectionsContainer = document.getElementById('sections-container');
        this.searchInput = document.getElementById('search');
        this.toast = document.getElementById('toast');
    }
    
    bindEvents() {
        // Search functionality
        this.searchInput.addEventListener('input', (e) => {
            this.filterPages(e.target.value);
        });
        
        document.getElementById('search-btn').addEventListener('click', () => {
            this.filterPages(this.searchInput.value);
        });
        
    }
    
    async loadPages() {
        try {
            this.showLoading();
            this.showContentLoading();
            
            // Try to load files list from files.json (generated by build script)
            let jsonFiles = [];
            try {
                const filesResponse = await fetch('./data/files.json');
                if (filesResponse.ok) {
                    jsonFiles = await filesResponse.json();
                    console.log(`üìÑ Carregando ${jsonFiles.length} arquivos do √≠ndice`);
                }
            } catch (error) {
                console.warn('files.json n√£o encontrado, tentando listagem de diret√≥rio...');
            }
            
            // Fallback: try directory listing (works locally)
            if (jsonFiles.length === 0) {
                try {
                    const response = await fetch('./data/');
                    if (response.ok) {
                        const html = await response.text();
                        jsonFiles = this.extractJsonFilesFromHtml(html);
                        console.log(`üìÑ Carregando ${jsonFiles.length} arquivos via listagem de diret√≥rio`);
                    }
                } catch (error) {
                    console.warn('Listagem de diret√≥rio falhou, usando lista conhecida...');
                }
            }
            
            // Final fallback: known files list
            if (jsonFiles.length === 0) {
                await this.loadKnownFiles();
                return;
            }
            
            // Load each JSON file
            for (let i = 0; i < jsonFiles.length; i++) {
                const file = jsonFiles[i];
                try {
                    const jsonResponse = await fetch(`./data/${file}`);
                    if (jsonResponse.ok) {
                        const pageData = await jsonResponse.json();
                        this.pages.push({
                            filename: file,
                            ...pageData
                        });
                    }
                } catch (error) {
                    console.warn(`Erro ao carregar ${file}:`, error);
                }
                
                // Update progress
                this.updateLoadingProgress(i + 1, jsonFiles.length);
            }
            
            this.processPagesData();
            this.hideContentLoading();
            
        } catch (error) {
            console.error('Erro ao carregar p√°ginas:', error);
            await this.loadKnownFiles();
        }
    }
    
    async loadKnownFiles() {
        // Try to load files from ./data/ directory
        const knownFiles = [
            'www-taniabulhoes-com-br.json',
            'www-taniabulhoes-com-br__casa.json',
            'www-taniabulhoes-com-br__casa-nova.json',
            'www-taniabulhoes-com-br__colecoes.json',
            'www-taniabulhoes-com-br__cuidados-pessoais.json',
            'www-taniabulhoes-com-br__em-busca-de-inspiracoes.json',
            'www-taniabulhoes-com-br__news.json',
            'www-taniabulhoes-com-br__perfumaria-casa.json'
        ];
        
        for (let i = 0; i < knownFiles.length; i++) {
            const file = knownFiles[i];
            try {
                const response = await fetch(`./data/${file}`);
                if (response.ok) {
                    const pageData = await response.json();
                    this.pages.push({
                        filename: file,
                        ...pageData
                    });
                }
            } catch (error) {
                console.warn(`Arquivo n√£o encontrado: ./data/${file}`);
            }
            
            // Update progress
            this.updateLoadingProgress(i + 1, knownFiles.length);
        }
        
        this.processPagesData();
        this.hideContentLoading();
    }
    
    extractJsonFilesFromHtml(html) {
        const jsonFiles = [];
        const regex = /href="([^"]*\.json)"/g;
        let match;
        
        while ((match = regex.exec(html)) !== null) {
            jsonFiles.push(match[1]);
        }
        
        return jsonFiles;
    }
    
    processPagesData() {
        this.filteredPages = [...this.pages];
        this.renderPagesList();
        this.updateStats();
        this.hideLoading();
        
        if (this.pages.length === 0) {
            this.showError('Nenhum arquivo JSON encontrado na pasta data/');
        }
    }
    
    filterPages(query) {
        if (!query.trim()) {
            this.filteredPages = [...this.pages];
        } else {
            const searchTerm = query.toLowerCase();
            this.filteredPages = this.pages.filter(page => {
                const titleMatch = page.title?.toLowerCase().includes(searchTerm);
                const urlMatch = page.url?.toLowerCase().includes(searchTerm);
                const contentMatch = page.sections?.some(section => 
                    section.heading?.toLowerCase().includes(searchTerm) ||
                    section.text_blocks?.some(text => text.toLowerCase().includes(searchTerm))
                );
                
                return titleMatch || urlMatch || contentMatch;
            });
        }
        
        this.renderPagesList();
    }
    
    renderPagesList() {
        if (this.filteredPages.length === 0) {
            this.pagesList.innerHTML = `
                <div class="loading">
                    ${this.pages.length === 0 ? 'Nenhuma p√°gina encontrada' : 'Nenhum resultado para a busca'}
                </div>
            `;
            return;
        }
        
        this.pagesList.innerHTML = this.filteredPages.map(page => `
            <div class="page-item" data-filename="${page.filename}">
                <div class="page-name">${this.getPageDisplayName(page)}</div>
                <div class="page-sections">${page.sections?.length || 0} ${(page.sections?.length || 0) === 1 ? 'se√ß√£o' : 'se√ß√µes'}</div>
            </div>
        `).join('');
        
        this.pageCount.textContent = `${this.filteredPages.length} p√°gina${this.filteredPages.length !== 1 ? 's' : ''}`;
        
        // Bind click events
        this.pagesList.querySelectorAll('.page-item').forEach(item => {
            item.addEventListener('click', () => {
                const filename = item.dataset.filename;
                const page = this.pages.find(p => p.filename === filename);
                this.selectPage(page);
                
                // Update active state
                this.pagesList.querySelectorAll('.page-item').forEach(i => i.classList.remove('active'));
                item.classList.add('active');
            });
        });
    }
    
    selectPage(page) {
        this.currentPage = page;
        this.renderPageContent();
        
        // Hide welcome screen and show content
        this.welcomeScreen.style.display = 'none';
        this.pageContent.style.display = 'block';
        
        // Reset scroll to top when switching pages
        this.contentArea.scrollTop = 0;
    }
    
    renderPageContent() {
        if (!this.currentPage) return;
        
        const page = this.currentPage;
        
        // Update page header
        this.pageTitle.textContent = page.title || 'Sem t√≠tulo';
        this.pageUrl.textContent = page.url || '';
        this.pageUrl.href = page.url || '#';
        this.pageDate.textContent = page.scrapedAt ? new Date(page.scrapedAt).toLocaleString('pt-BR') : '';
        const sectionsLength = page.sections?.length || 0;
        this.sectionsCount.textContent = `${sectionsLength} ${sectionsLength === 1 ? 'se√ß√£o' : 'se√ß√µes'}`;
        
        // Render sections
        this.sectionsContainer.innerHTML = (page.sections || []).map((section, index) => `
            <div class="section" data-section-index="${index}">
                <div class="section-header">
                    <div class="section-title">
                        ${section.heading ? `<h3 class="section-heading">${section.heading}</h3>` : ''}
                        <code class="section-selector">${section.selector || 'N/A'}</code>
                    </div>
                    <div class="section-actions">
                        <button class="btn btn-small btn-secondary copy-section-btn" data-section-index="${index}">
                            üìã Copiar Se√ß√£o
                        </button>
                    </div>
                </div>
                
                <div class="section-content">
                    ${this.renderTextBlocks(section.text_blocks)}
                    ${this.renderImageUrls(section.image_urls || section.images)}
                    ${this.renderVideoUrls(section.video_urls || section.videos)}
                </div>
            </div>
        `).join('');
        
        // Bind section copy buttons
        this.sectionsContainer.querySelectorAll('.copy-section-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const sectionIndex = parseInt(e.target.dataset.sectionIndex);
                this.copySectionContent(sectionIndex);
            });
        });
        
        // Bind text block copy functionality
        this.sectionsContainer.querySelectorAll('.text-block').forEach(block => {
            block.addEventListener('click', () => {
                this.copyToClipboard(block.textContent);
            });
        });
        
        // Bind image URL copy buttons
        this.sectionsContainer.querySelectorAll('.copy-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const url = e.target.dataset.url;
                this.copyToClipboard(url);
                e.stopPropagation();
            });
        });
    }
    
    renderTextBlocks(textBlocks) {
        if (!textBlocks || textBlocks.length === 0) {
            return '<p class="text-muted">Nenhum texto encontrado</p>';
        }
        
        return `
            <div class="text-blocks">
                ${textBlocks.map(text => `
                    <div class="text-block" title="Clique para copiar">
                        ${text}
                    </div>
                `).join('')}
            </div>
        `;
    }
    
    renderImageUrls(images) {
        let imageUrls = [];
        
        if (Array.isArray(images)) {
            if (images.length > 0 && typeof images[0] === 'string') {
                // Array of URLs
                imageUrls = images;
            } else {
                // Array of image objects
                imageUrls = images.map(img => img.best || img.src).filter(Boolean);
            }
        }
        
        if (imageUrls.length === 0) {
            return '<p class="text-muted">Nenhuma imagem encontrada</p>';
        }
        
        return `
            <div class="image-urls">
                <h4>üñºÔ∏è URLs das Imagens (${imageUrls.length})</h4>
                <div class="image-list">
                    ${imageUrls.map(url => `
                        <div class="image-url">
                            <span class="image-url-text">${url}</span>
                            <button class="copy-btn" data-url="${url}">Copiar URL</button>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }
    
    renderVideoUrls(videos) {
        let videoUrls = [];
        
        if (Array.isArray(videos)) {
            if (videos.length > 0 && typeof videos[0] === 'string') {
                // Array of URLs
                videoUrls = videos;
            } else {
                // Array of video objects
                videoUrls = videos.map(video => video.src).filter(Boolean);
            }
        }
        
        if (videoUrls.length === 0) {
            return '<p class="text-muted">Nenhum v√≠deo encontrado</p>';
        }
        
        return `
            <div class="video-urls">
                <h4>üé• URLs dos V√≠deos (${videoUrls.length})</h4>
                <div class="video-list">
                    ${videoUrls.map(url => `
                        <div class="video-url">
                            <span class="video-url-text">${url}</span>
                            <button class="copy-btn" data-url="${url}">Copiar URL</button>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }
    
    copySectionContent(sectionIndex) {
        if (!this.currentPage || !this.currentPage.sections[sectionIndex]) return;
        
        const section = this.currentPage.sections[sectionIndex];
        const content = this.formatSectionForCMS(section);
        this.copyToClipboard(content);
    }
    
    formatSectionForCMS(section) {
        let content = '';
        
        if (section.heading) {
            content += `# ${section.heading}\n\n`;
        }
        
        if (section.text_blocks && section.text_blocks.length > 0) {
            content += section.text_blocks.join('\n\n') + '\n\n';
        }
        
        const imageUrls = section.image_urls || (section.images || []).map(img => img.best || img.src).filter(Boolean);
        if (imageUrls.length > 0) {
            content += '## Imagens:\n';
            imageUrls.forEach(url => {
                content += `- ${url}\n`;
            });
            content += '\n';
        }
        
        const videoUrls = section.video_urls || (section.videos || []).map(video => video.src).filter(Boolean);
        if (videoUrls.length > 0) {
            content += '## V√≠deos:\n';
            videoUrls.forEach(url => {
                content += `- ${url}\n`;
            });
        }
        
        return content;
    }
    
    
    async copyToClipboard(text) {
        try {
            await navigator.clipboard.writeText(text);
            this.showToast('Copiado para a √°rea de transfer√™ncia!');
        } catch (error) {
            console.error('Erro ao copiar:', error);
            this.showToast('Erro ao copiar. Tente novamente.', 'error');
        }
    }
    
    showToast(message, type = 'success') {
        this.toast.querySelector('.toast-message').textContent = message;
        this.toast.className = `toast ${type}`;
        this.toast.classList.add('show');
        
        setTimeout(() => {
            this.toast.classList.remove('show');
        }, 3000);
    }
    
    updateStats() {
        this.totalPages.textContent = this.pages.length;
        
        const totalSectionCount = this.pages.reduce((total, page) => {
            return total + (page.sections?.length || 0);
        }, 0);
        
        this.totalSections.textContent = totalSectionCount;
    }
    
    getPageDisplayName(page) {
        if (page.title && page.title !== 'Tania Bulh√µes') {
            return page.title;
        }
        
        // Extract readable name from filename
        const name = page.filename
            .replace('.json', '')
            .replace('www-taniabulhoes-com-br', '')
            .replace(/__/g, ' / ')
            .replace(/^__/, '')
            .trim();
            
        return name || 'P√°gina Principal';
    }
    
    showLoading() {
        this.pagesList.innerHTML = '<div class="loading">Carregando p√°ginas...</div>';
    }
    
    hideLoading() {
        // Loading is hidden when renderPagesList is called
    }
    
    showError(message) {
        this.pagesList.innerHTML = `
            <div class="loading" style="color: #dc3545;">
                ‚ùå ${message}
            </div>
        `;
    }
    
    showContentLoading() {
        this.contentLoading.style.display = 'flex';
        this.welcomeScreen.style.display = 'none';
        this.pageContent.style.display = 'none';
    }
    
    updateLoadingProgress(current, total) {
        const percent = Math.round((current / total) * 100);
        const loadingText = this.contentLoading.querySelector('.loading');
        loadingText.textContent = `Carregando p√°ginas... ${percent}%`;
    }
    
    hideContentLoading() {
        this.contentLoading.style.display = 'none';
        this.welcomeScreen.style.display = 'flex';
    }
}

// Initialize the application when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new ContentViewer();
});